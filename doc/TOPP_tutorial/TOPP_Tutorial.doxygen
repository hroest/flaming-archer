// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// --------------------------------------------------------------------------
//                   OpenMS Mass Spectrometry Framework
// --------------------------------------------------------------------------
//  Copyright (C) 2003-2007 -- Oliver Kohlbacher, Knut Reinert
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
// $Maintainer: Marc Sturm $
// --------------------------------------------------------------------------

/**
	@page TOPP_Tutorial TOPP Tutorial

	This tutorial will give you a brief overview of the most important TOPP tools.
	First some basics that you will need for every TOPP tool are explained,
	then several example pipleines are shown.
	
	<HR>
	@section TOPP_fileformats File formats
	
		The main file formats for TOPP are:
		- @b mzData The HUPO-PSI standard format for mass spectrometry data.
		- @b featureXML The %OpenMS format for quantitation results.
		- @b idXML The %OpenMS format for protein and peptide identification.
		- @b consensusXML The %OpenMS format for alignment of peak and feature data.	
		- @b featurePairsXML The %OpenMS format for feature pairs.
		
		Documented schemas of the OpenMS formats can be found at http://open-ms.sourceforge.net/schemas/.
		
		@note The @a featureXML, @a featurePairsXML and @a idXML format will evantually be replaced by the HUPO-PSI AnalysisXML format.

	<HR>
	@section TOPP_common_options Common arguments of the TOPP tools
	
		Common options of all TOPP tools are:
	  - <b>-ini &lt;file&gt;</b> Use the given TOPP INI file
	  - <b>-log &lt;file&gt;</b> Location of the log file (default: 'TOPP.log')
	  - <b>-instance &lt;n&gt;</b> Instance number for the TOPP INI file (default: '1')
	  - <b>-debug &lt;n&gt;</b> Sets the debug level (default: '0')
	  - <b>-write_ini &lt;file&gt;</b> Writes an example INI file
	  - <b>-progress</b> Enables progress logging to command line
	  - <b>--help</b> Shows a help page for the command line and INI file options

	<HR>
	@section TOPP_parameters TOPP INI files
	
		TOPP INI files are XML-based and contain the configuration of one or several TOPP tools.
		
		The following examples give an overview of how TOPP tools can be chained in order to create analysis 
		pipelines. The issue of finding suitable parameters for the tools is not adressed here.
		If you encounter problems during the execution of the example pipelines on your data, you probably have 
		to adapt the parameters. Have a look at the documentation of the corresponding TOPP tool.

		@subsection TOPP_parameter_structure General structure of an INI file
		
		An INI file is always enclosed by the @a <PARAMETERS> tag. Inside this tag, a tree-like hierachy
		is created with @a <NODE> tags that represent sections and @a <ITEM> tags that each store one of the 
		parameters.
		
		Have a look at the example below for an example @a FileFilter INI file.
		Several parameter sets for @a FileFilter instances can specified in a @a FileFilter section.
		Inside this section, there can be several numbered subsections ('1', '2', ...). These numbers are 
		the instance numbers, that make storing several parameter sets for the same tool possible.
		(You can change the instance number a tool uses with the '-instance' command lines argument.)
		Inside each instance section, the actual parameters of the TOPP tool are given. Complex tools
		can even contain several subsections in order to group related parameters.
		
		If a parameter is not found in an instance section, the tool-specific common section and the general common
		section are searched for the parameter.@n
		Example: Imagine we call the @a FileFilter tool with the INI file given below and instance number '2'. 
		The FileFilter parameters @a rt and @a mz are looked up by the tool. 
		@a mz can be found in section @a FileFilter - @a 2. @a rt is not specified in this section,
		thus the @a common - @a FileFilter secion is checked, where it is found in our example. 
		When looking up the @a debug parameter, the tool would search the instance section and tool-specific common
		section without finding a value. Finally the general @a common section would be checked, where the debug 
		level is specified.
		
@code	
<PARAMETERS>

  <NODE name="FileFilter">
    <NODE name="1">
      <ITEM name="rt" value="0:1200" type="string"/>
    </NODE>
    <NODE name="2">
      <ITEM name="mz" value="700:1000" type="string"/>
    </NODE>
  </NODE>

  <NODE name="common">
    <ITEM name="debug" value="2" type="int"/>
    <NODE name="FileFilter">
      <ITEM name="rt" value=":" type="string"/>
      <ITEM name="mz" value=":" type="string"/>
    </NODE>
  </NODE>

</PARAMETERS>
@endcode
		
		@subsection TOPP_parameter_creation Creating an INI file for a TOPP tool
		
			The easiest way of creating a configuration file is to let the TOPP tool write the 
			configuration file using the argument '-write_ini'. Now the INI file can be adapted to your needs
			using @b INIFileEditor.
			@image html INIFileEditor.png
			In the @b INIFileEditor the documentation of most parameters is displayed as tooltip when you hover 
			over the parameter name with the mouse pointer. 
	
	<HR>
	@section TOPP_example1 Example 1: File Handling

		@subsection TOPP_files_info General information about peak and feature maps
			
			If you want some general information aout peak or feature maps, use the @b FileInfo tool.
			It prints RT, m/z and intensity ranges, the overall number of peaks, and the distribution of MS levels
			to the command line.
			
			Additionally it can print a statistical summary of intensities and some meta information.
			See the 'FileInfo --help' for details. 
			
		@subsection TOPP_files_conversion Converting your files to mzData
		
			OpenMS supports the HPLC-MS data formats @a mzData, @a mzXML and @a ANDI/MS.
			Proprietary MS machine formats are not supported. If you need to convert these formats to
			mzData or mzXML, please contact your MS vendor or have a look at the 
			<a href="http://sashimi.sourceforge.net" target="blank_">SASHIMI project page</a>.
			
			The TOPP tools work only on the HUPO-PSI @a mzData format. If you need to convert @a mzXML or @a ANDI/MS
			data to @a mzData, you can to that using the @b FileConverter, e.g.
			@code
FileConverter -in infile.mzData -out outfile.mzXML
			@endcode
		
		@subsection TOPP_files_dta Converting between DTA and mzData
		
			Sequest DTA files can be extracted from a mzData file using the @b DTAExtractor:
			@code
DTAExtractor -in infile.mzData -out outfile
			@endcode
			When you want to combine several files (e.g. DTA files) to an mzData file use the @b FileMerger:
			@code
FileMerger -in infile_list.txt -out outfile.mzData
			@endcode
			The retention times of the scans can be generated, taken from the @a infile_list.txt or can be extrated
			from the DTA file names. See the FileMerger documentation for details.
		
		@subsection TOPP_files_filter Extracting specific information from a file
			
			If you want to extract a part of the data from an mzData file, you can use the
			@b FileFilter tool. It allows filtering for RT, m/z and intensity range or for MS level.
			To extract the MS/MS scans between retention time 100 and 1500, you would use the following command:
			@code
FileFilter -in infile.mzData -levels 2 -rt 100:1500 -out outfile.mzData
			@endcode

	<HR>	
	@section TOPP_example2 Example 2: Raw data processing
	
		@image html TOPP_raw_data.png

	<HR>
	@section TOPP_example3 Example 3: Consensus peptide identification
	
		@image html TOPP_consensus_id.png

	
	<HR>
	@section TOPP_example4 Example 4: Map alignment
	
		@image html TOPP_map_mapping.png
	
		@image html TOPP_map_mapping_old.png

	

	<HR>
	@section TOPP_example5 Example 5: Isotope-labeled quantitation

		@image html TOPP_labeled_quant.png


	<HR>
	@section TOPP_example6 Example 6: Label-free quantitation
	
		@image html TOPP_labelfree_quant.png

	
*/
