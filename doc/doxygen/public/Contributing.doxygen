// --------------------------------------------------------------------------
//                   OpenMS -- Open-Source Mass Spectrometry               
// --------------------------------------------------------------------------
// Copyright The OpenMS Team -- Eberhard Karls University Tuebingen,
// ETH Zurich, and Freie Universitaet Berlin 2002-2012.
// 
// This software is released under a three-clause BSD license:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of any author or any participating institution 
//    may be used to endorse or promote products derived from this software 
//    without specific prior written permission.
// For a full list of authors, refer to the file AUTHORS. 
// --------------------------------------------------------------------------
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING 
// INSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// --------------------------------------------------------------------------
// $Maintainer:  $
// $Authors: Marc Sturm $
// --------------------------------------------------------------------------

// ATTENTION:
// Please write OpenMS like this:  %OpenMS
// Otherwise a link to the namespace is created.
// Thanks!


/**
	@page Contributing Contributing
	
	<H2 style="border-top:2px solid grey;">%OpenMS</H2>
		<UL>
			<LI><B>I have written a class for %OpenMS I want to contribute. What should I do?</B><BR>
				Basically, you must conform to the %OpenMS @subpage coding_conventions :
				<OL>
					<LI> Coding style (brackets, variable names, etc.) must conform to the conventions.
					<LI> The class and all the members must be documented thoroughly.
					<LI> A class test must exists, which tests each public member function.
					<LI> You can check your code with the tool <tt>tools/checker.php</tt>.
					     Call <tt>php tools/checker.php</tt> for detailed instructions.
				</OL>
				
				When this is done, you can either 
				<UL>
					<LI>post a patch to the mailing list or 
					<LI>become a developer and commit your code to the SVN directly.
				</UL>
			<LI><B>I want to implement a new file adapter. What is to be done?</B><BR>
				<OL>
					<LI> First you should add a file adapter class to the <tt>include/OpenMS/FORMAT/</tt> and <tt>source/FORMAT/</tt> folders.
					     The file adapter should implement a default constructor, a <tt>load</tt> method and a <tt>store</tt> method.
					     Make sure your code conforms to the %OpenMS @subpage coding_conventions .
					<LI> For automatic file type recognition, you need to
					  <UL>
					  	<LI> register your new file type at the <tt>Type</tt> enum in <tt>/include/OpenMS/FORMAT/FileTypes.h</tt>,
					  	<LI> flag the file type as supported in the <tt>isSupported</tt> method of <tt>/source/FORMAT/FileHandler.C</tt> and
					  	<LI> register the file extension in the <tt>getTypeByFileName</tt> method of <tt>/source/FORMAT/FileHandler.C</tt>.
					  </UL>
					<LI> If the new file is a peak or feature file format you should also add it to <tt>loadExperiment</tt> or <tt>loadFeatures</tt>, respectively, of the <tt>FileHandler</tt> class.
					<LI> To add the file format to the TOPPView open dialog, you have to modify the file <tt>/source/APPLICATIONS/TOPPViewBase.C</tt>.
					     Add the file extensions to the <tt>filter_all</tt> and <tt>filter_single</tt> variables of the <tt>getFileList_</tt> method.
					<LI> To add your format to TOPP applications, add the file extension to the extensions list of the respective parameter:<BR>
					     e.g. <tt>setValidStrings_("in_type", StringList::create("mzData,mzXML,mzML"));</tt> in <tt>FileInfo</tt>
				</OL>
		</UL>
	<H2 style="border-top:2px solid grey;">TOPP</H2>

			<LI><B>I want to implement a new TOPP tool. What is to be done?</B><BR>
      <OL>
        <LI> Prepare testdata for blackbox testing and add the test to <tt>source/TEST/TOPP/CMakeLists.txt</tt>. Make sure that a test exists for each commandline option of the tool.</LI>
        <LI> Add your tool either in <tt>source/APPLICATIONS/TOPP</tt> or <tt>source/APPLICATIONS/UTILS</tt> (depending on its maturity) </LI>
        <LI> Add your tool to the list in the ToolHandler in <tt>source/APPLICATIONS/ToolHandler.C</tt> </LI>
        <LI> Insert your tool into the documentation in <tt>doc/doxygen/public/TOPP.doxygen</tt> </LI>
      </OL>
*/
