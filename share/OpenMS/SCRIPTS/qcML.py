#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Feb 23 15:13:10 2012 by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

#~ ExternalEncoding = 'ascii'
ExternalEncoding = 'UTF-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class MzQualityMLType(GeneratedsSuper):
    """The type of the root element"""
    member_data_items_ = {
        'RunQuality': MemberSpec_('RunQuality', 'RunQualityAssessmentType', 1),
        'SetQuality': MemberSpec_('SetQuality', 'SetQualityAssessmentType', 0),
        'cvList': MemberSpec_('cvList', 'CVListType', 0),
        }
    subclass = None
    superclass = None
    def __init__(self, RunQuality=None, SetQuality=None, cvList=None):
        if RunQuality is None:
            self.RunQuality = []
        else:
            self.RunQuality = RunQuality
        self.SetQuality = SetQuality
        self.cvList = cvList
    def factory(*args_, **kwargs_):
        if MzQualityMLType.subclass:
            return MzQualityMLType.subclass(*args_, **kwargs_)
        else:
            return MzQualityMLType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RunQuality(self): return self.RunQuality
    def set_RunQuality(self, RunQuality): self.RunQuality = RunQuality
    def add_RunQuality(self, value): self.RunQuality.append(value)
    def insert_RunQuality(self, index, value): self.RunQuality[index] = value
    RunQualityProp = property(get_RunQuality, set_RunQuality)
    def get_SetQuality(self): return self.SetQuality
    def set_SetQuality(self, SetQuality): self.SetQuality = SetQuality
    SetQualityProp = property(get_SetQuality, set_SetQuality)
    def get_cvList(self): return self.cvList
    def set_cvList(self, cvList): self.cvList = cvList
    cvListProp = property(get_cvList, set_cvList)
    def export(self, outfile, level, namespace_='', name_='MzQualityMLType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MzQualityMLType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MzQualityMLType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MzQualityMLType', fromsubclass_=False):
        for RunQuality_ in self.RunQuality:
            RunQuality_.export(outfile, level, namespace_, name_='RunQuality')
        if self.SetQuality is not None:
            self.SetQuality.export(outfile, level, namespace_, name_='SetQuality')
        if self.cvList is not None:
            self.cvList.export(outfile, level, namespace_, name_='cvList', )
    def hasContent_(self):
        if (
            self.RunQuality or
            self.SetQuality is not None or
            self.cvList is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MzQualityMLType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('RunQuality=[\n')
        level += 1
        for RunQuality_ in self.RunQuality:
            showIndent(outfile, level)
            outfile.write('model_.RunQualityAssessmentType(\n')
            RunQuality_.exportLiteral(outfile, level, name_='RunQualityAssessmentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.SetQuality is not None:
            showIndent(outfile, level)
            outfile.write('SetQuality=model_.SetQualityAssessmentType(\n')
            self.SetQuality.exportLiteral(outfile, level, name_='SetQuality')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.cvList is not None:
            showIndent(outfile, level)
            outfile.write('cvList=model_.CVListType(\n')
            self.cvList.exportLiteral(outfile, level, name_='cvList')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RunQuality':
            obj_ = RunQualityAssessmentType.factory()
            obj_.build(child_)
            self.RunQuality.append(obj_)
        elif nodeName_ == 'SetQuality':
            obj_ = SetQualityAssessmentType.factory()
            obj_.build(child_)
            self.set_SetQuality(obj_)
        elif nodeName_ == 'cvList':
            obj_ = CVListType.factory()
            obj_.build(child_)
            self.set_cvList(obj_)
# end class MzQualityMLType


class CVListType(GeneratedsSuper):
    """The list of controlled vocabularies used in the file."""
    member_data_items_ = {
        'cv': MemberSpec_('cv', 'cvType', 1),
        }
    subclass = None
    superclass = None
    def __init__(self, cv=None):
        if cv is None:
            self.cv = []
        else:
            self.cv = cv
    def factory(*args_, **kwargs_):
        if CVListType.subclass:
            return CVListType.subclass(*args_, **kwargs_)
        else:
            return CVListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cv(self): return self.cv
    def set_cv(self, cv): self.cv = cv
    def add_cv(self, value): self.cv.append(value)
    def insert_cv(self, index, value): self.cv[index] = value
    cvProp = property(get_cv, set_cv)
    def export(self, outfile, level, namespace_='', name_='CVListType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CVListType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CVListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CVListType', fromsubclass_=False):
        for cv_ in self.cv:
            cv_.export(outfile, level, namespace_, name_='cv')
    def hasContent_(self):
        if (
            self.cv
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CVListType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('cv=[\n')
        level += 1
        for cv_ in self.cv:
            showIndent(outfile, level)
            outfile.write('model_.cvType(\n')
            cv_.exportLiteral(outfile, level, name_='cvType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cv':
            obj_ = cvType.factory()
            obj_.build(child_)
            self.cv.append(obj_)
# end class CVListType


class QualityAssessmentType(GeneratedsSuper):
    """The abstract base Type for QualityParameter container"""
    member_data_items_ = {
        'QualityParameter': MemberSpec_('QualityParameter', 'CVParamType', 1),
        'Attachment': MemberSpec_('Attachment', 'AttachmentType', 1),
        }
    subclass = None
    superclass = None
    def __init__(self, QualityParameter=None, Attachment=None, extensiontype_=None):
        if QualityParameter is None:
            self.QualityParameter = []
        else:
            self.QualityParameter = QualityParameter
        if Attachment is None:
            self.Attachment = []
        else:
            self.Attachment = Attachment
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if QualityAssessmentType.subclass:
            return QualityAssessmentType.subclass(*args_, **kwargs_)
        else:
            return QualityAssessmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_QualityParameter(self): return self.QualityParameter
    def set_QualityParameter(self, QualityParameter): self.QualityParameter = QualityParameter
    def add_QualityParameter(self, value): self.QualityParameter.append(value)
    def insert_QualityParameter(self, index, value): self.QualityParameter[index] = value
    QualityParameterProp = property(get_QualityParameter, set_QualityParameter)
    def get_Attachment(self): return self.Attachment
    def set_Attachment(self, Attachment): self.Attachment = Attachment
    def add_Attachment(self, value): self.Attachment.append(value)
    def insert_Attachment(self, index, value): self.Attachment[index] = value
    AttachmentProp = property(get_Attachment, set_Attachment)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def export(self, outfile, level, namespace_='', name_='QualityAssessmentType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QualityAssessmentType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QualityAssessmentType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QualityAssessmentType', fromsubclass_=False):
        for QualityParameter_ in self.QualityParameter:
            QualityParameter_.export(outfile, level, namespace_, name_='QualityParameter')
        for Attachment_ in self.Attachment:
            Attachment_.export(outfile, level, namespace_, name_='Attachment')
    def hasContent_(self):
        if (
            self.QualityParameter or
            self.Attachment
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='QualityAssessmentType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('QualityParameter=[\n')
        level += 1
        for QualityParameter_ in self.QualityParameter:
            showIndent(outfile, level)
            outfile.write('model_.CVParamType(\n')
            QualityParameter_.exportLiteral(outfile, level, name_='CVParamType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Attachment=[\n')
        level += 1
        for Attachment_ in self.Attachment:
            showIndent(outfile, level)
            outfile.write('model_.AttachmentType(\n')
            Attachment_.exportLiteral(outfile, level, name_='AttachmentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'QualityParameter':
            obj_ = CVParamType.factory()
            obj_.build(child_)
            self.QualityParameter.append(obj_)
        elif nodeName_ == 'Attachment':
            obj_ = AttachmentType.factory()
            obj_.build(child_)
            self.Attachment.append(obj_)
# end class QualityAssessmentType


class RunQualityAssessmentType(QualityAssessmentType):
    """The derived Type for QualityParameter container of a run"""
    member_data_items_ = {
        }
    subclass = None
    superclass = QualityAssessmentType
    def __init__(self, QualityParameter=None, Attachment=None):
        super(RunQualityAssessmentType, self).__init__(QualityParameter, Attachment, )
        pass
    def factory(*args_, **kwargs_):
        if RunQualityAssessmentType.subclass:
            return RunQualityAssessmentType.subclass(*args_, **kwargs_)
        else:
            return RunQualityAssessmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='RunQualityAssessmentType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RunQualityAssessmentType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RunQualityAssessmentType'):
        super(RunQualityAssessmentType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='RunQualityAssessmentType')
    def exportChildren(self, outfile, level, namespace_='', name_='RunQualityAssessmentType', fromsubclass_=False):
        super(RunQualityAssessmentType, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(RunQualityAssessmentType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RunQualityAssessmentType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(RunQualityAssessmentType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(RunQualityAssessmentType, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(RunQualityAssessmentType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(RunQualityAssessmentType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class RunQualityAssessmentType


class SetQualityAssessmentType(QualityAssessmentType):
    """The derived Type for QualityParameter container of a Set"""
    member_data_items_ = {
        }
    subclass = None
    superclass = QualityAssessmentType
    def __init__(self, QualityParameter=None, Attachment=None):
        super(SetQualityAssessmentType, self).__init__(QualityParameter, Attachment, )
        pass
    def factory(*args_, **kwargs_):
        if SetQualityAssessmentType.subclass:
            return SetQualityAssessmentType.subclass(*args_, **kwargs_)
        else:
            return SetQualityAssessmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='SetQualityAssessmentType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SetQualityAssessmentType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SetQualityAssessmentType'):
        super(SetQualityAssessmentType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SetQualityAssessmentType')
    def exportChildren(self, outfile, level, namespace_='', name_='SetQualityAssessmentType', fromsubclass_=False):
        super(SetQualityAssessmentType, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(SetQualityAssessmentType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SetQualityAssessmentType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(SetQualityAssessmentType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(SetQualityAssessmentType, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(SetQualityAssessmentType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(SetQualityAssessmentType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class SetQualityAssessmentType


class AbstractParamType(GeneratedsSuper):
    """Abstract entity allowing either cvParam or userParam to be
    referenced in other schemas. The name of the parameter.The user-
    entered value of the parameter.An accession number identifying
    the unit within the OBO foundry Unit CV. The name of the unit.If
    a unit term is referenced, this attribute must refer to the CV
    'id' attribute defined in the cvList in this file."""
    member_data_items_ = {
        'unitCvRef': MemberSpec_('unitCvRef', 'xsd:string', 0),
        'unitName': MemberSpec_('unitName', 'xsd:string', 0),
        'name': MemberSpec_('name', 'xsd:string', 0),
        'value': MemberSpec_('value', 'xsd:string', 0),
        'unitAccession': MemberSpec_('unitAccession', 'xsd:string', 0),
        }
    subclass = None
    superclass = None
    def __init__(self, unitCvRef=None, unitName=None, name=None, value=None, unitAccession=None, extensiontype_=None):
        self.unitCvRef = _cast(None, unitCvRef)
        self.unitName = _cast(None, unitName)
        self.name = _cast(None, name)
        self.value = _cast(None, value)
        self.unitAccession = _cast(None, unitAccession)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if AbstractParamType.subclass:
            return AbstractParamType.subclass(*args_, **kwargs_)
        else:
            return AbstractParamType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_unitCvRef(self): return self.unitCvRef
    def set_unitCvRef(self, unitCvRef): self.unitCvRef = unitCvRef
    unitCvRefProp = property(get_unitCvRef, set_unitCvRef)
    def get_unitName(self): return self.unitName
    def set_unitName(self, unitName): self.unitName = unitName
    unitNameProp = property(get_unitName, set_unitName)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    valueProp = property(get_value, set_value)
    def get_unitAccession(self): return self.unitAccession
    def set_unitAccession(self, unitAccession): self.unitAccession = unitAccession
    unitAccessionProp = property(get_unitAccession, set_unitAccession)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def export(self, outfile, level, namespace_='', name_='AbstractParamType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AbstractParamType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AbstractParamType'):
        if self.unitCvRef is not None and 'unitCvRef' not in already_processed:
            already_processed.append('unitCvRef')
            outfile.write(' unitCvRef=%s' % (self.gds_format_string(quote_attrib(self.unitCvRef).encode(ExternalEncoding), input_name='unitCvRef'), ))
        if self.unitName is not None and 'unitName' not in already_processed:
            already_processed.append('unitName')
            outfile.write(' unitName=%s' % (self.gds_format_string(quote_attrib(self.unitName).encode(ExternalEncoding), input_name='unitName'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
        if self.unitAccession is not None and 'unitAccession' not in already_processed:
            already_processed.append('unitAccession')
            outfile.write(' unitAccession=%s' % (self.gds_format_string(quote_attrib(self.unitAccession).encode(ExternalEncoding), input_name='unitAccession'), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='AbstractParamType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AbstractParamType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.unitCvRef is not None and 'unitCvRef' not in already_processed:
            already_processed.append('unitCvRef')
            showIndent(outfile, level)
            outfile.write('unitCvRef = "%s",\n' % (self.unitCvRef,))
        if self.unitName is not None and 'unitName' not in already_processed:
            already_processed.append('unitName')
            showIndent(outfile, level)
            outfile.write('unitName = "%s",\n' % (self.unitName,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            showIndent(outfile, level)
            outfile.write('value = "%s",\n' % (self.value,))
        if self.unitAccession is not None and 'unitAccession' not in already_processed:
            already_processed.append('unitAccession')
            showIndent(outfile, level)
            outfile.write('unitAccession = "%s",\n' % (self.unitAccession,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('unitCvRef', node)
        if value is not None and 'unitCvRef' not in already_processed:
            already_processed.append('unitCvRef')
            self.unitCvRef = value
        value = find_attr_value_('unitName', node)
        if value is not None and 'unitName' not in already_processed:
            already_processed.append('unitName')
            self.unitName = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.append('value')
            self.value = value
        value = find_attr_value_('unitAccession', node)
        if value is not None and 'unitAccession' not in already_processed:
            already_processed.append('unitAccession')
            self.unitAccession = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AbstractParamType


class AttachmentType(AbstractParamType):
    """A single attachment containing binary data and a cvParam containing
    the MIME type of the binary dataA reference to the cv element
    from which this term originates. The accession or ID number of
    this CV term in the source CV."""
    member_data_items_ = {
        'cvRef': MemberSpec_('cvRef', 'xsd:string', 0),
        'accession': MemberSpec_('accession', 'xsd:string', 0),
        'binary': MemberSpec_('binary', 'xsd:base64Binary', 0),
        }
    subclass = None
    superclass = AbstractParamType
    def __init__(self, unitCvRef=None, unitName=None, name=None, value=None, unitAccession=None, cvRef=None, accession=None, binary=None):
        super(AttachmentType, self).__init__(unitCvRef, unitName, name, value, unitAccession, )
        self.cvRef = _cast(None, cvRef)
        self.accession = _cast(None, accession)
        self.binary = binary
    def factory(*args_, **kwargs_):
        if AttachmentType.subclass:
            return AttachmentType.subclass(*args_, **kwargs_)
        else:
            return AttachmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_binary(self): return self.binary
    def set_binary(self, binary): self.binary = binary
    binaryProp = property(get_binary, set_binary)
    def get_cvRef(self): return self.cvRef
    def set_cvRef(self, cvRef): self.cvRef = cvRef
    cvRefProp = property(get_cvRef, set_cvRef)
    def get_accession(self): return self.accession
    def set_accession(self, accession): self.accession = accession
    accessionProp = property(get_accession, set_accession)
    def export(self, outfile, level, namespace_='', name_='AttachmentType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttachmentType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttachmentType'):
        super(AttachmentType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AttachmentType')
        if self.cvRef is not None and 'cvRef' not in already_processed:
            already_processed.append('cvRef')
            outfile.write(' cvRef=%s' % (self.gds_format_string(quote_attrib(self.cvRef).encode(ExternalEncoding), input_name='cvRef'), ))
        if self.accession is not None and 'accession' not in already_processed:
            already_processed.append('accession')
            outfile.write(' accession=%s' % (self.gds_format_string(quote_attrib(self.accession).encode(ExternalEncoding), input_name='accession'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AttachmentType', fromsubclass_=False):
        super(AttachmentType, self).exportChildren(outfile, level, namespace_, name_, True)
        if self.binary is not None:
            showIndent(outfile, level)
            outfile.write('<%sbinary>%s</%sbinary>\n' % (namespace_, self.gds_format_string(quote_xml(self.binary).encode(ExternalEncoding), input_name='binary'), namespace_))
    def hasContent_(self):
        if (
            self.binary is not None or
            super(AttachmentType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AttachmentType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.cvRef is not None and 'cvRef' not in already_processed:
            already_processed.append('cvRef')
            showIndent(outfile, level)
            outfile.write('cvRef = "%s",\n' % (self.cvRef,))
        if self.accession is not None and 'accession' not in already_processed:
            already_processed.append('accession')
            showIndent(outfile, level)
            outfile.write('accession = "%s",\n' % (self.accession,))
        super(AttachmentType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(AttachmentType, self).exportLiteralChildren(outfile, level, name_)
        if self.binary is not None:
            showIndent(outfile, level)
            outfile.write('binary=%s,\n' % quote_python(self.binary).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('cvRef', node)
        if value is not None and 'cvRef' not in already_processed:
            already_processed.append('cvRef')
            self.cvRef = value
        value = find_attr_value_('accession', node)
        if value is not None and 'accession' not in already_processed:
            already_processed.append('accession')
            self.accession = value
        super(AttachmentType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'binary':
            binary_ = child_.text
            binary_ = self.gds_validate_string(binary_, node, 'binary')
            self.binary = binary_
        super(AttachmentType, self).buildChildren(child_, node, nodeName_, True)
# end class AttachmentType


class CVParamType(AbstractParamType):
    """A single entry from an ontology or a controlled vocabulary.A
    reference to the cv element from which this term originates. The
    accession or ID number of this CV term in the source CV."""
    member_data_items_ = {
        'cvRef': MemberSpec_('cvRef', 'xsd:string', 0),
        'accession': MemberSpec_('accession', 'xsd:string', 0),
        }
    subclass = None
    superclass = AbstractParamType
    def __init__(self, unitCvRef=None, unitName=None, name=None, value=None, unitAccession=None, cvRef=None, accession=None):
        super(CVParamType, self).__init__(unitCvRef, unitName, name, value, unitAccession, )
        self.cvRef = _cast(None, cvRef)
        self.accession = _cast(None, accession)
        pass
    def factory(*args_, **kwargs_):
        if CVParamType.subclass:
            return CVParamType.subclass(*args_, **kwargs_)
        else:
            return CVParamType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cvRef(self): return self.cvRef
    def set_cvRef(self, cvRef): self.cvRef = cvRef
    cvRefProp = property(get_cvRef, set_cvRef)
    def get_accession(self): return self.accession
    def set_accession(self, accession): self.accession = accession
    accessionProp = property(get_accession, set_accession)
    def export(self, outfile, level, namespace_='', name_='CVParamType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CVParamType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CVParamType'):
        super(CVParamType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='CVParamType')
        if self.cvRef is not None and 'cvRef' not in already_processed:
            already_processed.append('cvRef')
            outfile.write(' cvRef=%s' % (self.gds_format_string(quote_attrib(self.cvRef).encode(ExternalEncoding), input_name='cvRef'), ))
        if self.accession is not None and 'accession' not in already_processed:
            already_processed.append('accession')
            outfile.write(' accession=%s' % (self.gds_format_string(quote_attrib(self.accession).encode(ExternalEncoding), input_name='accession'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CVParamType', fromsubclass_=False):
        super(CVParamType, self).exportChildren(outfile, level, namespace_, name_, True)
        pass
    def hasContent_(self):
        if (
            super(CVParamType, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CVParamType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.cvRef is not None and 'cvRef' not in already_processed:
            already_processed.append('cvRef')
            showIndent(outfile, level)
            outfile.write('cvRef = "%s",\n' % (self.cvRef,))
        if self.accession is not None and 'accession' not in already_processed:
            already_processed.append('accession')
            showIndent(outfile, level)
            outfile.write('accession = "%s",\n' % (self.accession,))
        super(CVParamType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(CVParamType, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('cvRef', node)
        if value is not None and 'cvRef' not in already_processed:
            already_processed.append('cvRef')
            self.cvRef = value
        value = find_attr_value_('accession', node)
        if value is not None and 'accession' not in already_processed:
            already_processed.append('accession')
            self.accession = value
        super(CVParamType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(CVParamType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class CVParamType


class cvType(GeneratedsSuper):
    """A source controlled vocabulary from which cvParams will be
    obtained.The full name of the CV.The version of the CV.The URI
    of the source CV.The unique identifier of this cv within the
    document to be referenced by cvParam elements."""
    member_data_items_ = {
        'fullName': MemberSpec_('fullName', 'xsd:string', 0),
        'version': MemberSpec_('version', 'xsd:string', 0),
        'uri': MemberSpec_('uri', 'xsd:anyURI', 0),
        'id': MemberSpec_('id', 'xsd:string', 0),
        }
    subclass = None
    superclass = None
    def __init__(self, fullName=None, version=None, uri=None, id=None):
        self.fullName = _cast(None, fullName)
        self.version = _cast(None, version)
        self.uri = _cast(None, uri)
        self.id = _cast(None, id)
        pass
    def factory(*args_, **kwargs_):
        if cvType.subclass:
            return cvType.subclass(*args_, **kwargs_)
        else:
            return cvType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_fullName(self): return self.fullName
    def set_fullName(self, fullName): self.fullName = fullName
    fullNameProp = property(get_fullName, set_fullName)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    versionProp = property(get_version, set_version)
    def get_uri(self): return self.uri
    def set_uri(self, uri): self.uri = uri
    uriProp = property(get_uri, set_uri)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    idProp = property(get_id, set_id)
    def export(self, outfile, level, namespace_='', name_='cvType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cvType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cvType'):
        if self.fullName is not None and 'fullName' not in already_processed:
            already_processed.append('fullName')
            outfile.write(' fullName=%s' % (self.gds_format_string(quote_attrib(self.fullName).encode(ExternalEncoding), input_name='fullName'), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.uri is not None and 'uri' not in already_processed:
            already_processed.append('uri')
            outfile.write(' uri=%s' % (self.gds_format_string(quote_attrib(self.uri).encode(ExternalEncoding), input_name='uri'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='cvType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='cvType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.fullName is not None and 'fullName' not in already_processed:
            already_processed.append('fullName')
            showIndent(outfile, level)
            outfile.write('fullName = "%s",\n' % (self.fullName,))
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            showIndent(outfile, level)
            outfile.write('version = "%s",\n' % (self.version,))
        if self.uri is not None and 'uri' not in already_processed:
            already_processed.append('uri')
            showIndent(outfile, level)
            outfile.write('uri = "%s",\n' % (self.uri,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('fullName', node)
        if value is not None and 'fullName' not in already_processed:
            already_processed.append('fullName')
            self.fullName = value
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.append('version')
            self.version = value
        value = find_attr_value_('uri', node)
        if value is not None and 'uri' not in already_processed:
            already_processed.append('uri')
            self.uri = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cvType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MzQualityML'
        rootClass = MzQualityML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag,
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MzQualityML'
        rootClass = MzQualityML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="MzQualityML",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MzQualityML'
        rootClass = MzQualityML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from qcML import *\n\n')
    sys.stdout.write('import qcML as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AbstractParamType",
    "AttachmentType",
    "CVListType",
    "CVParamType",
    "MzQualityMLType",
    "QualityAssessmentType",
    "RunQualityAssessmentType",
    "SetQualityAssessmentType",
    "cvType"
    ]
